// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rules.proto
// Protobuf C++ Version: 5.29.3

#include "rules.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dsl {

inline constexpr RangeCheck::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        low_{0},
        high_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RangeCheck::RangeCheck(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RangeCheckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeCheckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeCheckDefaultTypeInternal() {}
  union {
    RangeCheck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeCheckDefaultTypeInternal _RangeCheck_default_instance_;

inline constexpr Comparison::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        op_{static_cast< ::dsl::ComparisonOpType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Comparison::Comparison(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComparisonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComparisonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComparisonDefaultTypeInternal() {}
  union {
    Comparison _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComparisonDefaultTypeInternal _Comparison_default_instance_;

inline constexpr Expr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : expr_kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Expr::Expr(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExprDefaultTypeInternal() {}
  union {
    Expr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExprDefaultTypeInternal _Expr_default_instance_;

inline constexpr Logical::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : operands_{},
        op_{static_cast< ::dsl::LogicOpType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Logical::Logical(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogicalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalDefaultTypeInternal() {}
  union {
    Logical _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalDefaultTypeInternal _Logical_default_instance_;

inline constexpr NotExpr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        expr_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NotExpr::NotExpr(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NotExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotExprDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotExprDefaultTypeInternal() {}
  union {
    NotExpr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotExprDefaultTypeInternal _NotExpr_default_instance_;

inline constexpr Rule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        condition_{nullptr},
        severity_{static_cast< ::dsl::SeverityType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Rule::Rule(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleDefaultTypeInternal() {}
  union {
    Rule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleDefaultTypeInternal _Rule_default_instance_;

inline constexpr RuleSet::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rules_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RuleSet::RuleSet(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RuleSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuleSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuleSetDefaultTypeInternal() {}
  union {
    RuleSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuleSetDefaultTypeInternal _RuleSet_default_instance_;
}  // namespace dsl
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rules_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rules_2eproto = nullptr;
const ::uint32_t
    TableStruct_rules_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dsl::RuleSet, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::RuleSet, _impl_.rules_),
        PROTOBUF_FIELD_OFFSET(::dsl::Rule, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::dsl::Rule, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::Rule, _impl_.severity_),
        PROTOBUF_FIELD_OFFSET(::dsl::Rule, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::dsl::Rule, _impl_.condition_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dsl::Expr, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::dsl::Expr, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::dsl::Expr, _impl_.expr_kind_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dsl::Comparison, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::Comparison, _impl_.column_),
        PROTOBUF_FIELD_OFFSET(::dsl::Comparison, _impl_.op_),
        PROTOBUF_FIELD_OFFSET(::dsl::Comparison, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, _impl_.column_),
        PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, _impl_.high_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dsl::Logical, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::Logical, _impl_.op_),
        PROTOBUF_FIELD_OFFSET(::dsl::Logical, _impl_.operands_),
        PROTOBUF_FIELD_OFFSET(::dsl::NotExpr, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::dsl::NotExpr, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dsl::NotExpr, _impl_.expr_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::dsl::RuleSet)},
        {9, 20, -1, sizeof(::dsl::Rule)},
        {23, -1, -1, sizeof(::dsl::Expr)},
        {36, -1, -1, sizeof(::dsl::Comparison)},
        {47, -1, -1, sizeof(::dsl::RangeCheck)},
        {58, -1, -1, sizeof(::dsl::Logical)},
        {68, 77, -1, sizeof(::dsl::NotExpr)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::dsl::_RuleSet_default_instance_._instance,
    &::dsl::_Rule_default_instance_._instance,
    &::dsl::_Expr_default_instance_._instance,
    &::dsl::_Comparison_default_instance_._instance,
    &::dsl::_RangeCheck_default_instance_._instance,
    &::dsl::_Logical_default_instance_._instance,
    &::dsl::_NotExpr_default_instance_._instance,
};
const char descriptor_table_protodef_rules_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013rules.proto\022\003dsl\"#\n\007RuleSet\022\030\n\005rules\030\001"
    " \003(\0132\t.dsl.Rule\"X\n\004Rule\022#\n\010severity\030\001 \001("
    "\0162\021.dsl.SeverityType\022\r\n\005label\030\002 \001(\t\022\034\n\tc"
    "ondition\030\003 \001(\0132\t.dsl.Expr\"\237\001\n\004Expr\022%\n\nco"
    "mparison\030\001 \001(\0132\017.dsl.ComparisonH\000\022 \n\005ran"
    "ge\030\002 \001(\0132\017.dsl.RangeCheckH\000\022\037\n\007logical\030\003"
    " \001(\0132\014.dsl.LogicalH\000\022 \n\010not_expr\030\004 \001(\0132\014"
    ".dsl.NotExprH\000B\013\n\texpr_kind\"N\n\nCompariso"
    "n\022\016\n\006column\030\001 \001(\t\022!\n\002op\030\002 \001(\0162\025.dsl.Comp"
    "arisonOpType\022\r\n\005value\030\003 \001(\t\"7\n\nRangeChec"
    "k\022\016\n\006column\030\001 \001(\t\022\013\n\003low\030\002 \001(\001\022\014\n\004high\030\003"
    " \001(\001\"D\n\007Logical\022\034\n\002op\030\001 \001(\0162\020.dsl.LogicO"
    "pType\022\033\n\010operands\030\002 \003(\0132\t.dsl.Expr\"\"\n\007No"
    "tExpr\022\027\n\004expr\030\001 \001(\0132\t.dsl.Expr*#\n\014Severi"
    "tyType\022\010\n\004WARN\020\000\022\t\n\005ERROR\020\001*S\n\020Compariso"
    "nOpType\022\017\n\013UNSPECIFIED\020\000\022\006\n\002EQ\020\001\022\006\n\002NE\020\002"
    "\022\006\n\002GT\020\003\022\006\n\002GE\020\004\022\006\n\002LT\020\005\022\006\n\002LE\020\006*\036\n\013Logi"
    "cOpType\022\007\n\003AND\020\000\022\006\n\002OR\020\001b\006proto3"
};
static ::absl::once_flag descriptor_table_rules_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_rules_2eproto = {
    false,
    false,
    712,
    descriptor_table_protodef_rules_2eproto,
    "rules.proto",
    &descriptor_table_rules_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_rules_2eproto::offsets,
    file_level_enum_descriptors_rules_2eproto,
    file_level_service_descriptors_rules_2eproto,
};
namespace dsl {
const ::google::protobuf::EnumDescriptor* SeverityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SeverityType_internal_data_[] = {
    131072u, 0u, };
bool SeverityType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* ComparisonOpType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ComparisonOpType_internal_data_[] = {
    458752u, 0u, };
bool ComparisonOpType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* LogicOpType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t LogicOpType_internal_data_[] = {
    131072u, 0u, };
bool LogicOpType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class RuleSet::_Internal {
 public:
};

RuleSet::RuleSet(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.RuleSet)
}
inline PROTOBUF_NDEBUG_INLINE RuleSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::RuleSet& from_msg)
      : rules_{visibility, arena, from.rules_},
        _cached_size_{0} {}

RuleSet::RuleSet(
    ::google::protobuf::Arena* arena,
    const RuleSet& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RuleSet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:dsl.RuleSet)
}
inline PROTOBUF_NDEBUG_INLINE RuleSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rules_{visibility, arena},
        _cached_size_{0} {}

inline void RuleSet::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RuleSet::~RuleSet() {
  // @@protoc_insertion_point(destructor:dsl.RuleSet)
  SharedDtor(*this);
}
inline void RuleSet::SharedDtor(MessageLite& self) {
  RuleSet& this_ = static_cast<RuleSet&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RuleSet::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RuleSet(arena);
}
constexpr auto RuleSet::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RuleSet, _impl_.rules_) +
          decltype(RuleSet::_impl_.rules_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RuleSet), alignof(RuleSet), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RuleSet::PlacementNew_,
                                 sizeof(RuleSet),
                                 alignof(RuleSet));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RuleSet::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RuleSet_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RuleSet::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RuleSet>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RuleSet::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RuleSet>(), &RuleSet::ByteSizeLong,
            &RuleSet::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RuleSet, _impl_._cached_size_),
        false,
    },
    &RuleSet::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RuleSet::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> RuleSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::RuleSet>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .dsl.Rule rules = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RuleSet, _impl_.rules_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .dsl.Rule rules = 1;
    {PROTOBUF_FIELD_OFFSET(RuleSet, _impl_.rules_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dsl::Rule>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void RuleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.RuleSet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RuleSet::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RuleSet& this_ = static_cast<const RuleSet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RuleSet::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RuleSet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.RuleSet)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .dsl.Rule rules = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_rules_size());
               i < n; i++) {
            const auto& repfield = this_._internal_rules().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.RuleSet)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RuleSet::ByteSizeLong(const MessageLite& base) {
          const RuleSet& this_ = static_cast<const RuleSet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RuleSet::ByteSizeLong() const {
          const RuleSet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.RuleSet)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .dsl.Rule rules = 1;
            {
              total_size += 1UL * this_._internal_rules_size();
              for (const auto& msg : this_._internal_rules()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RuleSet::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RuleSet*>(&to_msg);
  auto& from = static_cast<const RuleSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.RuleSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rules()->MergeFrom(
      from._internal_rules());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RuleSet::CopyFrom(const RuleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.RuleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RuleSet::InternalSwap(RuleSet* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
}

::google::protobuf::Metadata RuleSet::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Rule::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Rule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Rule, _impl_._has_bits_);
};

Rule::Rule(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.Rule)
}
inline PROTOBUF_NDEBUG_INLINE Rule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::Rule& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        label_(arena, from.label_) {}

Rule::Rule(
    ::google::protobuf::Arena* arena,
    const Rule& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Rule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.condition_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::dsl::Expr>(
                              arena, *from._impl_.condition_)
                        : nullptr;
  _impl_.severity_ = from._impl_.severity_;

  // @@protoc_insertion_point(copy_constructor:dsl.Rule)
}
inline PROTOBUF_NDEBUG_INLINE Rule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        label_(arena) {}

inline void Rule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, condition_),
           0,
           offsetof(Impl_, severity_) -
               offsetof(Impl_, condition_) +
               sizeof(Impl_::severity_));
}
Rule::~Rule() {
  // @@protoc_insertion_point(destructor:dsl.Rule)
  SharedDtor(*this);
}
inline void Rule::SharedDtor(MessageLite& self) {
  Rule& this_ = static_cast<Rule&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.label_.Destroy();
  delete this_._impl_.condition_;
  this_._impl_.~Impl_();
}

inline void* Rule::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Rule(arena);
}
constexpr auto Rule::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Rule),
                                            alignof(Rule));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Rule::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Rule_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Rule::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Rule>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Rule::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Rule>(), &Rule::ByteSizeLong,
            &Rule::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Rule, _impl_._cached_size_),
        false,
    },
    &Rule::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Rule::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 22, 2> Rule::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Rule, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::Rule>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .dsl.SeverityType severity = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Rule, _impl_.severity_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Rule, _impl_.severity_)}},
    // string label = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Rule, _impl_.label_)}},
    // .dsl.Expr condition = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Rule, _impl_.condition_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dsl.SeverityType severity = 1;
    {PROTOBUF_FIELD_OFFSET(Rule, _impl_.severity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string label = 2;
    {PROTOBUF_FIELD_OFFSET(Rule, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dsl.Expr condition = 3;
    {PROTOBUF_FIELD_OFFSET(Rule, _impl_.condition_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dsl::Expr>()},
  }}, {{
    "\10\0\5\0\0\0\0\0"
    "dsl.Rule"
    "label"
  }},
};

PROTOBUF_NOINLINE void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Rule)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.condition_ != nullptr);
    _impl_.condition_->Clear();
  }
  _impl_.severity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Rule::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Rule& this_ = static_cast<const Rule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Rule::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Rule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.Rule)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .dsl.SeverityType severity = 1;
          if (this_._internal_severity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_severity(), target);
          }

          // string label = 2;
          if (!this_._internal_label().empty()) {
            const std::string& _s = this_._internal_label();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dsl.Rule.label");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .dsl.Expr condition = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.condition_, this_._impl_.condition_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.Rule)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Rule::ByteSizeLong(const MessageLite& base) {
          const Rule& this_ = static_cast<const Rule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Rule::ByteSizeLong() const {
          const Rule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.Rule)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string label = 2;
            if (!this_._internal_label().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_label());
            }
          }
           {
            // .dsl.Expr condition = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.condition_);
            }
          }
           {
            // .dsl.SeverityType severity = 1;
            if (this_._internal_severity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_severity());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Rule::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Rule*>(&to_msg);
  auto& from = static_cast<const Rule&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.Rule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.condition_ != nullptr);
    if (_this->_impl_.condition_ == nullptr) {
      _this->_impl_.condition_ =
          ::google::protobuf::Message::CopyConstruct<::dsl::Expr>(arena, *from._impl_.condition_);
    } else {
      _this->_impl_.condition_->MergeFrom(*from._impl_.condition_);
    }
  }
  if (from._internal_severity() != 0) {
    _this->_impl_.severity_ = from._impl_.severity_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Rule::InternalSwap(Rule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rule, _impl_.severity_)
      + sizeof(Rule::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(Rule, _impl_.condition_)>(
          reinterpret_cast<char*>(&_impl_.condition_),
          reinterpret_cast<char*>(&other->_impl_.condition_));
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Expr::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::dsl::Expr, _impl_._oneof_case_);
};

void Expr::set_allocated_comparison(::dsl::Comparison* comparison) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr_kind();
  if (comparison) {
    ::google::protobuf::Arena* submessage_arena = comparison->GetArena();
    if (message_arena != submessage_arena) {
      comparison = ::google::protobuf::internal::GetOwnedMessage(message_arena, comparison, submessage_arena);
    }
    set_has_comparison();
    _impl_.expr_kind_.comparison_ = comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.comparison)
}
void Expr::set_allocated_range(::dsl::RangeCheck* range) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr_kind();
  if (range) {
    ::google::protobuf::Arena* submessage_arena = range->GetArena();
    if (message_arena != submessage_arena) {
      range = ::google::protobuf::internal::GetOwnedMessage(message_arena, range, submessage_arena);
    }
    set_has_range();
    _impl_.expr_kind_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.range)
}
void Expr::set_allocated_logical(::dsl::Logical* logical) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr_kind();
  if (logical) {
    ::google::protobuf::Arena* submessage_arena = logical->GetArena();
    if (message_arena != submessage_arena) {
      logical = ::google::protobuf::internal::GetOwnedMessage(message_arena, logical, submessage_arena);
    }
    set_has_logical();
    _impl_.expr_kind_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.logical)
}
void Expr::set_allocated_not_expr(::dsl::NotExpr* not_expr) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_expr_kind();
  if (not_expr) {
    ::google::protobuf::Arena* submessage_arena = not_expr->GetArena();
    if (message_arena != submessage_arena) {
      not_expr = ::google::protobuf::internal::GetOwnedMessage(message_arena, not_expr, submessage_arena);
    }
    set_has_not_expr();
    _impl_.expr_kind_.not_expr_ = not_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.not_expr)
}
Expr::Expr(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.Expr)
}
inline PROTOBUF_NDEBUG_INLINE Expr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::Expr& from_msg)
      : expr_kind_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Expr::Expr(
    ::google::protobuf::Arena* arena,
    const Expr& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Expr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (expr_kind_case()) {
    case EXPR_KIND_NOT_SET:
      break;
      case kComparison:
        _impl_.expr_kind_.comparison_ = ::google::protobuf::Message::CopyConstruct<::dsl::Comparison>(arena, *from._impl_.expr_kind_.comparison_);
        break;
      case kRange:
        _impl_.expr_kind_.range_ = ::google::protobuf::Message::CopyConstruct<::dsl::RangeCheck>(arena, *from._impl_.expr_kind_.range_);
        break;
      case kLogical:
        _impl_.expr_kind_.logical_ = ::google::protobuf::Message::CopyConstruct<::dsl::Logical>(arena, *from._impl_.expr_kind_.logical_);
        break;
      case kNotExpr:
        _impl_.expr_kind_.not_expr_ = ::google::protobuf::Message::CopyConstruct<::dsl::NotExpr>(arena, *from._impl_.expr_kind_.not_expr_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dsl.Expr)
}
inline PROTOBUF_NDEBUG_INLINE Expr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : expr_kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Expr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Expr::~Expr() {
  // @@protoc_insertion_point(destructor:dsl.Expr)
  SharedDtor(*this);
}
inline void Expr::SharedDtor(MessageLite& self) {
  Expr& this_ = static_cast<Expr&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_expr_kind()) {
    this_.clear_expr_kind();
  }
  this_._impl_.~Impl_();
}

void Expr::clear_expr_kind() {
// @@protoc_insertion_point(one_of_clear_start:dsl.Expr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (expr_kind_case()) {
    case kComparison: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_kind_.comparison_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.expr_kind_.comparison_);
      }
      break;
    }
    case kRange: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_kind_.range_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.expr_kind_.range_);
      }
      break;
    }
    case kLogical: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_kind_.logical_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.expr_kind_.logical_);
      }
      break;
    }
    case kNotExpr: {
      if (GetArena() == nullptr) {
        delete _impl_.expr_kind_.not_expr_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.expr_kind_.not_expr_);
      }
      break;
    }
    case EXPR_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXPR_KIND_NOT_SET;
}


inline void* Expr::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Expr(arena);
}
constexpr auto Expr::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Expr),
                                            alignof(Expr));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Expr::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Expr_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Expr::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Expr>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Expr::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Expr>(), &Expr::ByteSizeLong,
            &Expr::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Expr, _impl_._cached_size_),
        false,
    },
    &Expr::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Expr::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 4, 0, 2> Expr::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::Expr>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dsl.Comparison comparison = 1;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.comparison_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dsl.RangeCheck range = 2;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.range_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dsl.Logical logical = 3;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.logical_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dsl.NotExpr not_expr = 4;
    {PROTOBUF_FIELD_OFFSET(Expr, _impl_.expr_kind_.not_expr_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dsl::Comparison>()},
    {::_pbi::TcParser::GetTable<::dsl::RangeCheck>()},
    {::_pbi::TcParser::GetTable<::dsl::Logical>()},
    {::_pbi::TcParser::GetTable<::dsl::NotExpr>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Expr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr_kind();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Expr::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Expr& this_ = static_cast<const Expr&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Expr::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Expr& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.Expr)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.expr_kind_case()) {
            case kComparison: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.expr_kind_.comparison_, this_._impl_.expr_kind_.comparison_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRange: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.expr_kind_.range_, this_._impl_.expr_kind_.range_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLogical: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.expr_kind_.logical_, this_._impl_.expr_kind_.logical_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNotExpr: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.expr_kind_.not_expr_, this_._impl_.expr_kind_.not_expr_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.Expr)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Expr::ByteSizeLong(const MessageLite& base) {
          const Expr& this_ = static_cast<const Expr&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Expr::ByteSizeLong() const {
          const Expr& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.Expr)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.expr_kind_case()) {
            // .dsl.Comparison comparison = 1;
            case kComparison: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expr_kind_.comparison_);
              break;
            }
            // .dsl.RangeCheck range = 2;
            case kRange: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expr_kind_.range_);
              break;
            }
            // .dsl.Logical logical = 3;
            case kLogical: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expr_kind_.logical_);
              break;
            }
            // .dsl.NotExpr not_expr = 4;
            case kNotExpr: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expr_kind_.not_expr_);
              break;
            }
            case EXPR_KIND_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Expr::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Expr*>(&to_msg);
  auto& from = static_cast<const Expr&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.Expr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_expr_kind();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kComparison: {
        if (oneof_needs_init) {
          _this->_impl_.expr_kind_.comparison_ =
              ::google::protobuf::Message::CopyConstruct<::dsl::Comparison>(arena, *from._impl_.expr_kind_.comparison_);
        } else {
          _this->_impl_.expr_kind_.comparison_->MergeFrom(from._internal_comparison());
        }
        break;
      }
      case kRange: {
        if (oneof_needs_init) {
          _this->_impl_.expr_kind_.range_ =
              ::google::protobuf::Message::CopyConstruct<::dsl::RangeCheck>(arena, *from._impl_.expr_kind_.range_);
        } else {
          _this->_impl_.expr_kind_.range_->MergeFrom(from._internal_range());
        }
        break;
      }
      case kLogical: {
        if (oneof_needs_init) {
          _this->_impl_.expr_kind_.logical_ =
              ::google::protobuf::Message::CopyConstruct<::dsl::Logical>(arena, *from._impl_.expr_kind_.logical_);
        } else {
          _this->_impl_.expr_kind_.logical_->MergeFrom(from._internal_logical());
        }
        break;
      }
      case kNotExpr: {
        if (oneof_needs_init) {
          _this->_impl_.expr_kind_.not_expr_ =
              ::google::protobuf::Message::CopyConstruct<::dsl::NotExpr>(arena, *from._impl_.expr_kind_.not_expr_);
        } else {
          _this->_impl_.expr_kind_.not_expr_->MergeFrom(from._internal_not_expr());
        }
        break;
      }
      case EXPR_KIND_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Expr::InternalSwap(Expr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.expr_kind_, other->_impl_.expr_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Comparison::_Internal {
 public:
};

Comparison::Comparison(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.Comparison)
}
inline PROTOBUF_NDEBUG_INLINE Comparison::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::Comparison& from_msg)
      : column_(arena, from.column_),
        value_(arena, from.value_),
        _cached_size_{0} {}

Comparison::Comparison(
    ::google::protobuf::Arena* arena,
    const Comparison& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Comparison* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:dsl.Comparison)
}
inline PROTOBUF_NDEBUG_INLINE Comparison::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_(arena),
        value_(arena),
        _cached_size_{0} {}

inline void Comparison::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.op_ = {};
}
Comparison::~Comparison() {
  // @@protoc_insertion_point(destructor:dsl.Comparison)
  SharedDtor(*this);
}
inline void Comparison::SharedDtor(MessageLite& self) {
  Comparison& this_ = static_cast<Comparison&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.column_.Destroy();
  this_._impl_.value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Comparison::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Comparison(arena);
}
constexpr auto Comparison::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Comparison),
                                            alignof(Comparison));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Comparison::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Comparison_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Comparison::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Comparison>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Comparison::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Comparison>(), &Comparison::ByteSizeLong,
            &Comparison::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Comparison, _impl_._cached_size_),
        false,
    },
    &Comparison::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Comparison::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 34, 2> Comparison::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::Comparison>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string column = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Comparison, _impl_.column_)}},
    // .dsl.ComparisonOpType op = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Comparison, _impl_.op_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Comparison, _impl_.op_)}},
    // string value = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Comparison, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column = 1;
    {PROTOBUF_FIELD_OFFSET(Comparison, _impl_.column_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dsl.ComparisonOpType op = 2;
    {PROTOBUF_FIELD_OFFSET(Comparison, _impl_.op_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string value = 3;
    {PROTOBUF_FIELD_OFFSET(Comparison, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\6\0\5\0\0\0\0"
    "dsl.Comparison"
    "column"
    "value"
  }},
};

PROTOBUF_NOINLINE void Comparison::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Comparison)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.op_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Comparison::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Comparison& this_ = static_cast<const Comparison&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Comparison::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Comparison& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.Comparison)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column = 1;
          if (!this_._internal_column().empty()) {
            const std::string& _s = this_._internal_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dsl.Comparison.column");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .dsl.ComparisonOpType op = 2;
          if (this_._internal_op() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_op(), target);
          }

          // string value = 3;
          if (!this_._internal_value().empty()) {
            const std::string& _s = this_._internal_value();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dsl.Comparison.value");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.Comparison)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Comparison::ByteSizeLong(const MessageLite& base) {
          const Comparison& this_ = static_cast<const Comparison&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Comparison::ByteSizeLong() const {
          const Comparison& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.Comparison)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column = 1;
            if (!this_._internal_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column());
            }
            // string value = 3;
            if (!this_._internal_value().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_value());
            }
            // .dsl.ComparisonOpType op = 2;
            if (this_._internal_op() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_op());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Comparison::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Comparison*>(&to_msg);
  auto& from = static_cast<const Comparison&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.Comparison)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _this->_internal_set_column(from._internal_column());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_op() != 0) {
    _this->_impl_.op_ = from._impl_.op_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Comparison::CopyFrom(const Comparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Comparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Comparison::InternalSwap(Comparison* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_, &other->_impl_.column_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
  swap(_impl_.op_, other->_impl_.op_);
}

::google::protobuf::Metadata Comparison::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RangeCheck::_Internal {
 public:
};

RangeCheck::RangeCheck(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.RangeCheck)
}
inline PROTOBUF_NDEBUG_INLINE RangeCheck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::RangeCheck& from_msg)
      : column_(arena, from.column_),
        _cached_size_{0} {}

RangeCheck::RangeCheck(
    ::google::protobuf::Arena* arena,
    const RangeCheck& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RangeCheck* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, low_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, low_),
           offsetof(Impl_, high_) -
               offsetof(Impl_, low_) +
               sizeof(Impl_::high_));

  // @@protoc_insertion_point(copy_constructor:dsl.RangeCheck)
}
inline PROTOBUF_NDEBUG_INLINE RangeCheck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_(arena),
        _cached_size_{0} {}

inline void RangeCheck::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, low_),
           0,
           offsetof(Impl_, high_) -
               offsetof(Impl_, low_) +
               sizeof(Impl_::high_));
}
RangeCheck::~RangeCheck() {
  // @@protoc_insertion_point(destructor:dsl.RangeCheck)
  SharedDtor(*this);
}
inline void RangeCheck::SharedDtor(MessageLite& self) {
  RangeCheck& this_ = static_cast<RangeCheck&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.column_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RangeCheck::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RangeCheck(arena);
}
constexpr auto RangeCheck::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RangeCheck),
                                            alignof(RangeCheck));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RangeCheck::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RangeCheck_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RangeCheck::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RangeCheck>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RangeCheck::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RangeCheck>(), &RangeCheck::ByteSizeLong,
            &RangeCheck::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_._cached_size_),
        false,
    },
    &RangeCheck::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RangeCheck::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 29, 2> RangeCheck::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::RangeCheck>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string column = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.column_)}},
    // double low = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.low_)}},
    // double high = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.high_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column = 1;
    {PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.column_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double low = 2;
    {PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.low_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high = 3;
    {PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.high_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\16\6\0\0\0\0\0\0"
    "dsl.RangeCheck"
    "column"
  }},
};

PROTOBUF_NOINLINE void RangeCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.RangeCheck)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.ClearToEmpty();
  ::memset(&_impl_.low_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.high_) -
      reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RangeCheck::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RangeCheck& this_ = static_cast<const RangeCheck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RangeCheck::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RangeCheck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.RangeCheck)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column = 1;
          if (!this_._internal_column().empty()) {
            const std::string& _s = this_._internal_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dsl.RangeCheck.column");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double low = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_low(), target);
          }

          // double high = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_high(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.RangeCheck)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RangeCheck::ByteSizeLong(const MessageLite& base) {
          const RangeCheck& this_ = static_cast<const RangeCheck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RangeCheck::ByteSizeLong() const {
          const RangeCheck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.RangeCheck)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column = 1;
            if (!this_._internal_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column());
            }
            // double low = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
              total_size += 9;
            }
            // double high = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RangeCheck::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RangeCheck*>(&to_msg);
  auto& from = static_cast<const RangeCheck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.RangeCheck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _this->_internal_set_column(from._internal_column());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
    _this->_impl_.low_ = from._impl_.low_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
    _this->_impl_.high_ = from._impl_.high_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RangeCheck::CopyFrom(const RangeCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.RangeCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RangeCheck::InternalSwap(RangeCheck* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_, &other->_impl_.column_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.high_)
      + sizeof(RangeCheck::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(RangeCheck, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::google::protobuf::Metadata RangeCheck::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Logical::_Internal {
 public:
};

Logical::Logical(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.Logical)
}
inline PROTOBUF_NDEBUG_INLINE Logical::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::Logical& from_msg)
      : operands_{visibility, arena, from.operands_},
        _cached_size_{0} {}

Logical::Logical(
    ::google::protobuf::Arena* arena,
    const Logical& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Logical* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.op_ = from._impl_.op_;

  // @@protoc_insertion_point(copy_constructor:dsl.Logical)
}
inline PROTOBUF_NDEBUG_INLINE Logical::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : operands_{visibility, arena},
        _cached_size_{0} {}

inline void Logical::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.op_ = {};
}
Logical::~Logical() {
  // @@protoc_insertion_point(destructor:dsl.Logical)
  SharedDtor(*this);
}
inline void Logical::SharedDtor(MessageLite& self) {
  Logical& this_ = static_cast<Logical&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Logical::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Logical(arena);
}
constexpr auto Logical::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Logical, _impl_.operands_) +
          decltype(Logical::_impl_.operands_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Logical), alignof(Logical), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Logical::PlacementNew_,
                                 sizeof(Logical),
                                 alignof(Logical));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Logical::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Logical_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Logical::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Logical>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Logical::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Logical>(), &Logical::ByteSizeLong,
            &Logical::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Logical, _impl_._cached_size_),
        false,
    },
    &Logical::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Logical::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Logical::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::Logical>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .dsl.Expr operands = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Logical, _impl_.operands_)}},
    // .dsl.LogicOpType op = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Logical, _impl_.op_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Logical, _impl_.op_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dsl.LogicOpType op = 1;
    {PROTOBUF_FIELD_OFFSET(Logical, _impl_.op_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .dsl.Expr operands = 2;
    {PROTOBUF_FIELD_OFFSET(Logical, _impl_.operands_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dsl::Expr>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Logical::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Logical)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operands_.Clear();
  _impl_.op_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Logical::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Logical& this_ = static_cast<const Logical&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Logical::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Logical& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.Logical)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .dsl.LogicOpType op = 1;
          if (this_._internal_op() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_op(), target);
          }

          // repeated .dsl.Expr operands = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_operands_size());
               i < n; i++) {
            const auto& repfield = this_._internal_operands().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.Logical)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Logical::ByteSizeLong(const MessageLite& base) {
          const Logical& this_ = static_cast<const Logical&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Logical::ByteSizeLong() const {
          const Logical& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.Logical)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .dsl.Expr operands = 2;
            {
              total_size += 1UL * this_._internal_operands_size();
              for (const auto& msg : this_._internal_operands()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .dsl.LogicOpType op = 1;
            if (this_._internal_op() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_op());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Logical::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Logical*>(&to_msg);
  auto& from = static_cast<const Logical&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.Logical)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operands()->MergeFrom(
      from._internal_operands());
  if (from._internal_op() != 0) {
    _this->_impl_.op_ = from._impl_.op_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Logical::CopyFrom(const Logical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Logical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Logical::InternalSwap(Logical* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operands_.InternalSwap(&other->_impl_.operands_);
  swap(_impl_.op_, other->_impl_.op_);
}

::google::protobuf::Metadata Logical::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NotExpr::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NotExpr>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NotExpr, _impl_._has_bits_);
};

NotExpr::NotExpr(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsl.NotExpr)
}
inline PROTOBUF_NDEBUG_INLINE NotExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dsl::NotExpr& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

NotExpr::NotExpr(
    ::google::protobuf::Arena* arena,
    const NotExpr& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NotExpr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.expr_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::dsl::Expr>(
                              arena, *from._impl_.expr_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:dsl.NotExpr)
}
inline PROTOBUF_NDEBUG_INLINE NotExpr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NotExpr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.expr_ = {};
}
NotExpr::~NotExpr() {
  // @@protoc_insertion_point(destructor:dsl.NotExpr)
  SharedDtor(*this);
}
inline void NotExpr::SharedDtor(MessageLite& self) {
  NotExpr& this_ = static_cast<NotExpr&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.expr_;
  this_._impl_.~Impl_();
}

inline void* NotExpr::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NotExpr(arena);
}
constexpr auto NotExpr::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(NotExpr),
                                            alignof(NotExpr));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NotExpr::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NotExpr_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NotExpr::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NotExpr>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NotExpr::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NotExpr>(), &NotExpr::ByteSizeLong,
            &NotExpr::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NotExpr, _impl_._cached_size_),
        false,
    },
    &NotExpr::kDescriptorMethods,
    &descriptor_table_rules_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NotExpr::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> NotExpr::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NotExpr, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dsl::NotExpr>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .dsl.Expr expr = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NotExpr, _impl_.expr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dsl.Expr expr = 1;
    {PROTOBUF_FIELD_OFFSET(NotExpr, _impl_.expr_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dsl::Expr>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NotExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.NotExpr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.expr_ != nullptr);
    _impl_.expr_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NotExpr::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NotExpr& this_ = static_cast<const NotExpr&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NotExpr::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NotExpr& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dsl.NotExpr)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .dsl.Expr expr = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.expr_, this_._impl_.expr_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dsl.NotExpr)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NotExpr::ByteSizeLong(const MessageLite& base) {
          const NotExpr& this_ = static_cast<const NotExpr&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NotExpr::ByteSizeLong() const {
          const NotExpr& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dsl.NotExpr)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .dsl.Expr expr = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expr_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NotExpr::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NotExpr*>(&to_msg);
  auto& from = static_cast<const NotExpr&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:dsl.NotExpr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.expr_ != nullptr);
    if (_this->_impl_.expr_ == nullptr) {
      _this->_impl_.expr_ =
          ::google::protobuf::Message::CopyConstruct<::dsl::Expr>(arena, *from._impl_.expr_);
    } else {
      _this->_impl_.expr_->MergeFrom(*from._impl_.expr_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NotExpr::CopyFrom(const NotExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.NotExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NotExpr::InternalSwap(NotExpr* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.expr_, other->_impl_.expr_);
}

::google::protobuf::Metadata NotExpr::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace dsl
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_rules_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
