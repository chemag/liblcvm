// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dsl {
constexpr RuleSet::RuleSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_(){}
struct RuleSetDefaultTypeInternal {
  constexpr RuleSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleSetDefaultTypeInternal() {}
  union {
    RuleSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleSetDefaultTypeInternal _RuleSet_default_instance_;
constexpr Rule::Rule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , condition_(nullptr)
  , severity_(0)
{}
struct RuleDefaultTypeInternal {
  constexpr RuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleDefaultTypeInternal() {}
  union {
    Rule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleDefaultTypeInternal _Rule_default_instance_;
constexpr Expr::Expr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExprDefaultTypeInternal {
  constexpr ExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExprDefaultTypeInternal() {}
  union {
    Expr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExprDefaultTypeInternal _Expr_default_instance_;
constexpr Comparison::Comparison(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , op_(0)
{}
struct ComparisonDefaultTypeInternal {
  constexpr ComparisonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComparisonDefaultTypeInternal() {}
  union {
    Comparison _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComparisonDefaultTypeInternal _Comparison_default_instance_;
constexpr RangeCheck::RangeCheck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , low_(0)
  , high_(0){}
struct RangeCheckDefaultTypeInternal {
  constexpr RangeCheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeCheckDefaultTypeInternal() {}
  union {
    RangeCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeCheckDefaultTypeInternal _RangeCheck_default_instance_;
constexpr Logical::Logical(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operands_()
  , op_(0)
{}
struct LogicalDefaultTypeInternal {
  constexpr LogicalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogicalDefaultTypeInternal() {}
  union {
    Logical _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogicalDefaultTypeInternal _Logical_default_instance_;
constexpr NotExpr::NotExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expr_(nullptr){}
struct NotExprDefaultTypeInternal {
  constexpr NotExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotExprDefaultTypeInternal() {}
  union {
    NotExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotExprDefaultTypeInternal _NotExpr_default_instance_;
}  // namespace dsl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rules_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rules_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rules_2eproto = nullptr;

const uint32_t TableStruct_rules_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::RuleSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::RuleSet, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::Rule, severity_),
  PROTOBUF_FIELD_OFFSET(::dsl::Rule, label_),
  PROTOBUF_FIELD_OFFSET(::dsl::Rule, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dsl::Expr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dsl::Expr, expr_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::Comparison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::Comparison, column_),
  PROTOBUF_FIELD_OFFSET(::dsl::Comparison, op_),
  PROTOBUF_FIELD_OFFSET(::dsl::Comparison, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, column_),
  PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, low_),
  PROTOBUF_FIELD_OFFSET(::dsl::RangeCheck, high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::Logical, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::Logical, op_),
  PROTOBUF_FIELD_OFFSET(::dsl::Logical, operands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dsl::NotExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dsl::NotExpr, expr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dsl::RuleSet)},
  { 7, -1, -1, sizeof(::dsl::Rule)},
  { 16, -1, -1, sizeof(::dsl::Expr)},
  { 27, -1, -1, sizeof(::dsl::Comparison)},
  { 36, -1, -1, sizeof(::dsl::RangeCheck)},
  { 45, -1, -1, sizeof(::dsl::Logical)},
  { 53, -1, -1, sizeof(::dsl::NotExpr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_RuleSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_Rule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_Expr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_Comparison_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_RangeCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_Logical_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dsl::_NotExpr_default_instance_),
};

const char descriptor_table_protodef_rules_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013rules.proto\022\003dsl\"#\n\007RuleSet\022\030\n\005rules\030\001"
  " \003(\0132\t.dsl.Rule\"X\n\004Rule\022#\n\010severity\030\001 \001("
  "\0162\021.dsl.SeverityType\022\r\n\005label\030\002 \001(\t\022\034\n\tc"
  "ondition\030\003 \001(\0132\t.dsl.Expr\"\237\001\n\004Expr\022%\n\nco"
  "mparison\030\001 \001(\0132\017.dsl.ComparisonH\000\022 \n\005ran"
  "ge\030\002 \001(\0132\017.dsl.RangeCheckH\000\022\037\n\007logical\030\003"
  " \001(\0132\014.dsl.LogicalH\000\022 \n\010not_expr\030\004 \001(\0132\014"
  ".dsl.NotExprH\000B\013\n\texpr_kind\"N\n\nCompariso"
  "n\022\016\n\006column\030\001 \001(\t\022!\n\002op\030\002 \001(\0162\025.dsl.Comp"
  "arisonOpType\022\r\n\005value\030\003 \001(\t\"7\n\nRangeChec"
  "k\022\016\n\006column\030\001 \001(\t\022\013\n\003low\030\002 \001(\001\022\014\n\004high\030\003"
  " \001(\001\"D\n\007Logical\022\034\n\002op\030\001 \001(\0162\020.dsl.LogicO"
  "pType\022\033\n\010operands\030\002 \003(\0132\t.dsl.Expr\"\"\n\007No"
  "tExpr\022\027\n\004expr\030\001 \001(\0132\t.dsl.Expr*#\n\014Severi"
  "tyType\022\010\n\004WARN\020\000\022\t\n\005ERROR\020\001*S\n\020Compariso"
  "nOpType\022\017\n\013UNSPECIFIED\020\000\022\006\n\002EQ\020\001\022\006\n\002NE\020\002"
  "\022\006\n\002GT\020\003\022\006\n\002GE\020\004\022\006\n\002LT\020\005\022\006\n\002LE\020\006*\036\n\013Logi"
  "cOpType\022\007\n\003AND\020\000\022\006\n\002OR\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rules_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rules_2eproto = {
  false, false, 712, descriptor_table_protodef_rules_2eproto, "rules.proto", 
  &descriptor_table_rules_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_rules_2eproto::offsets,
  file_level_metadata_rules_2eproto, file_level_enum_descriptors_rules_2eproto, file_level_service_descriptors_rules_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rules_2eproto_getter() {
  return &descriptor_table_rules_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rules_2eproto(&descriptor_table_rules_2eproto);
namespace dsl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeverityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[0];
}
bool SeverityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[1];
}
bool ComparisonOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rules_2eproto);
  return file_level_enum_descriptors_rules_2eproto[2];
}
bool LogicOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RuleSet::_Internal {
 public:
};

RuleSet::RuleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.RuleSet)
}
RuleSet::RuleSet(const RuleSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dsl.RuleSet)
}

inline void RuleSet::SharedCtor() {
}

RuleSet::~RuleSet() {
  // @@protoc_insertion_point(destructor:dsl.RuleSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuleSet::ArenaDtor(void* object) {
  RuleSet* _this = reinterpret_cast< RuleSet* >(object);
  (void)_this;
}
void RuleSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.RuleSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dsl.Rule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.RuleSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dsl.Rule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.RuleSet)
  return target;
}

size_t RuleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.RuleSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dsl.Rule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleSet::GetClassData() const { return &_class_data_; }

void RuleSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleSet *>(to)->MergeFrom(
      static_cast<const RuleSet &>(from));
}


void RuleSet::MergeFrom(const RuleSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.RuleSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleSet::CopyFrom(const RuleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.RuleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleSet::IsInitialized() const {
  return true;
}

void RuleSet::InternalSwap(RuleSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[0]);
}

// ===================================================================

class Rule::_Internal {
 public:
  static const ::dsl::Expr& condition(const Rule* msg);
};

const ::dsl::Expr&
Rule::_Internal::condition(const Rule* msg) {
  return *msg->condition_;
}
Rule::Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.Rule)
}
Rule::Rule(const Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::dsl::Expr(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:dsl.Rule)
}

inline void Rule::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&condition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&condition_)) + sizeof(severity_));
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:dsl.Rule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void Rule::ArenaDtor(void* object) {
  Rule* _this = reinterpret_cast< Rule* >(object);
  (void)_this;
}
void Rule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Rule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  severity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dsl.SeverityType severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::dsl::SeverityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dsl.Rule.label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dsl.Expr condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.Rule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dsl.SeverityType severity = 1;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dsl.Rule.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // .dsl.Expr condition = 3;
  if (this->_internal_has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.Rule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .dsl.Expr condition = 3;
  if (this->_internal_has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .dsl.SeverityType severity = 1;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rule::GetClassData() const { return &_class_data_; }

void Rule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rule *>(to)->MergeFrom(
      static_cast<const Rule &>(from));
}


void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_has_condition()) {
    _internal_mutable_condition()->::dsl::Expr::MergeFrom(from._internal_condition());
  }
  if (from._internal_severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  return true;
}

void Rule::InternalSwap(Rule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rule, severity_)
      + sizeof(Rule::severity_)
      - PROTOBUF_FIELD_OFFSET(Rule, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[1]);
}

// ===================================================================

class Expr::_Internal {
 public:
  static const ::dsl::Comparison& comparison(const Expr* msg);
  static const ::dsl::RangeCheck& range(const Expr* msg);
  static const ::dsl::Logical& logical(const Expr* msg);
  static const ::dsl::NotExpr& not_expr(const Expr* msg);
};

const ::dsl::Comparison&
Expr::_Internal::comparison(const Expr* msg) {
  return *msg->expr_kind_.comparison_;
}
const ::dsl::RangeCheck&
Expr::_Internal::range(const Expr* msg) {
  return *msg->expr_kind_.range_;
}
const ::dsl::Logical&
Expr::_Internal::logical(const Expr* msg) {
  return *msg->expr_kind_.logical_;
}
const ::dsl::NotExpr&
Expr::_Internal::not_expr(const Expr* msg) {
  return *msg->expr_kind_.not_expr_;
}
void Expr::set_allocated_comparison(::dsl::Comparison* comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_kind();
  if (comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::Comparison>::GetOwningArena(comparison);
    if (message_arena != submessage_arena) {
      comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparison, submessage_arena);
    }
    set_has_comparison();
    expr_kind_.comparison_ = comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.comparison)
}
void Expr::set_allocated_range(::dsl::RangeCheck* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_kind();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::RangeCheck>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    expr_kind_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.range)
}
void Expr::set_allocated_logical(::dsl::Logical* logical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_kind();
  if (logical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::Logical>::GetOwningArena(logical);
    if (message_arena != submessage_arena) {
      logical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical, submessage_arena);
    }
    set_has_logical();
    expr_kind_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.logical)
}
void Expr::set_allocated_not_expr(::dsl::NotExpr* not_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_kind();
  if (not_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::NotExpr>::GetOwningArena(not_expr);
    if (message_arena != submessage_arena) {
      not_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_expr, submessage_arena);
    }
    set_has_not_expr();
    expr_kind_.not_expr_ = not_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:dsl.Expr.not_expr)
}
Expr::Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.Expr)
}
Expr::Expr(const Expr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_expr_kind();
  switch (from.expr_kind_case()) {
    case kComparison: {
      _internal_mutable_comparison()->::dsl::Comparison::MergeFrom(from._internal_comparison());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::dsl::RangeCheck::MergeFrom(from._internal_range());
      break;
    }
    case kLogical: {
      _internal_mutable_logical()->::dsl::Logical::MergeFrom(from._internal_logical());
      break;
    }
    case kNotExpr: {
      _internal_mutable_not_expr()->::dsl::NotExpr::MergeFrom(from._internal_not_expr());
      break;
    }
    case EXPR_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dsl.Expr)
}

inline void Expr::SharedCtor() {
clear_has_expr_kind();
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:dsl.Expr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Expr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_expr_kind()) {
    clear_expr_kind();
  }
}

void Expr::ArenaDtor(void* object) {
  Expr* _this = reinterpret_cast< Expr* >(object);
  (void)_this;
}
void Expr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expr::clear_expr_kind() {
// @@protoc_insertion_point(one_of_clear_start:dsl.Expr)
  switch (expr_kind_case()) {
    case kComparison: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_kind_.comparison_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_kind_.range_;
      }
      break;
    }
    case kLogical: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_kind_.logical_;
      }
      break;
    }
    case kNotExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_kind_.not_expr_;
      }
      break;
    }
    case EXPR_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_KIND_NOT_SET;
}


void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Expr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dsl.Comparison comparison = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_comparison(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dsl.RangeCheck range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dsl.Logical logical = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dsl.NotExpr not_expr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.Expr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dsl.Comparison comparison = 1;
  if (_internal_has_comparison()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::comparison(this), target, stream);
  }

  // .dsl.RangeCheck range = 2;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // .dsl.Logical logical = 3;
  if (_internal_has_logical()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::logical(this), target, stream);
  }

  // .dsl.NotExpr not_expr = 4;
  if (_internal_has_not_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::not_expr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.Expr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (expr_kind_case()) {
    // .dsl.Comparison comparison = 1;
    case kComparison: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_kind_.comparison_);
      break;
    }
    // .dsl.RangeCheck range = 2;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_kind_.range_);
      break;
    }
    // .dsl.Logical logical = 3;
    case kLogical: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_kind_.logical_);
      break;
    }
    // .dsl.NotExpr not_expr = 4;
    case kNotExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_kind_.not_expr_);
      break;
    }
    case EXPR_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Expr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expr::GetClassData() const { return &_class_data_; }

void Expr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Expr *>(to)->MergeFrom(
      static_cast<const Expr &>(from));
}


void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expr_kind_case()) {
    case kComparison: {
      _internal_mutable_comparison()->::dsl::Comparison::MergeFrom(from._internal_comparison());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::dsl::RangeCheck::MergeFrom(from._internal_range());
      break;
    }
    case kLogical: {
      _internal_mutable_logical()->::dsl::Logical::MergeFrom(from._internal_logical());
      break;
    }
    case kNotExpr: {
      _internal_mutable_not_expr()->::dsl::NotExpr::MergeFrom(from._internal_not_expr());
      break;
    }
    case EXPR_KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  return true;
}

void Expr::InternalSwap(Expr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(expr_kind_, other->expr_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[2]);
}

// ===================================================================

class Comparison::_Internal {
 public:
};

Comparison::Comparison(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.Comparison)
}
Comparison::Comparison(const Comparison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column().empty()) {
    column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:dsl.Comparison)
}

inline void Comparison::SharedCtor() {
column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
op_ = 0;
}

Comparison::~Comparison() {
  // @@protoc_insertion_point(destructor:dsl.Comparison)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Comparison::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Comparison::ArenaDtor(void* object) {
  Comparison* _this = reinterpret_cast< Comparison* >(object);
  (void)_this;
}
void Comparison::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Comparison::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Comparison::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Comparison)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.ClearToEmpty();
  value_.ClearToEmpty();
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Comparison::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dsl.Comparison.column"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dsl.ComparisonOpType op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::dsl::ComparisonOpType>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dsl.Comparison.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Comparison::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.Comparison)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column().data(), static_cast<int>(this->_internal_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dsl.Comparison.column");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column(), target);
  }

  // .dsl.ComparisonOpType op = 2;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_op(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dsl.Comparison.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.Comparison)
  return target;
}

size_t Comparison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.Comparison)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .dsl.ComparisonOpType op = 2;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Comparison::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Comparison::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Comparison::GetClassData() const { return &_class_data_; }

void Comparison::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Comparison *>(to)->MergeFrom(
      static_cast<const Comparison &>(from));
}


void Comparison::MergeFrom(const Comparison& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.Comparison)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _internal_set_column(from._internal_column());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Comparison::CopyFrom(const Comparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Comparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comparison::IsInitialized() const {
  return true;
}

void Comparison::InternalSwap(Comparison* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_, lhs_arena,
      &other->column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Comparison::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[3]);
}

// ===================================================================

class RangeCheck::_Internal {
 public:
};

RangeCheck::RangeCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.RangeCheck)
}
RangeCheck::RangeCheck(const RangeCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column().empty()) {
    column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column(), 
      GetArenaForAllocation());
  }
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:dsl.RangeCheck)
}

inline void RangeCheck::SharedCtor() {
column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

RangeCheck::~RangeCheck() {
  // @@protoc_insertion_point(destructor:dsl.RangeCheck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangeCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeCheck::ArenaDtor(void* object) {
  RangeCheck* _this = reinterpret_cast< RangeCheck* >(object);
  (void)_this;
}
void RangeCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.RangeCheck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.ClearToEmpty();
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&low_)) + sizeof(high_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dsl.RangeCheck.column"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeCheck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.RangeCheck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column().data(), static_cast<int>(this->_internal_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dsl.RangeCheck.column");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column(), target);
  }

  // double low = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = this->_internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_low(), target);
  }

  // double high = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = this->_internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.RangeCheck)
  return target;
}

size_t RangeCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.RangeCheck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column());
  }

  // double low = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = this->_internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    total_size += 1 + 8;
  }

  // double high = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = this->_internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeCheck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeCheck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeCheck::GetClassData() const { return &_class_data_; }

void RangeCheck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RangeCheck *>(to)->MergeFrom(
      static_cast<const RangeCheck &>(from));
}


void RangeCheck::MergeFrom(const RangeCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.RangeCheck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _internal_set_column(from._internal_column());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = from._internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    _internal_set_low(from._internal_low());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = from._internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    _internal_set_high(from._internal_high());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeCheck::CopyFrom(const RangeCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.RangeCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeCheck::IsInitialized() const {
  return true;
}

void RangeCheck::InternalSwap(RangeCheck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_, lhs_arena,
      &other->column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeCheck, high_)
      + sizeof(RangeCheck::high_)
      - PROTOBUF_FIELD_OFFSET(RangeCheck, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeCheck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[4]);
}

// ===================================================================

class Logical::_Internal {
 public:
};

Logical::Logical(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.Logical)
}
Logical::Logical(const Logical& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operands_(from.operands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:dsl.Logical)
}

inline void Logical::SharedCtor() {
op_ = 0;
}

Logical::~Logical() {
  // @@protoc_insertion_point(destructor:dsl.Logical)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Logical::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Logical::ArenaDtor(void* object) {
  Logical* _this = reinterpret_cast< Logical* >(object);
  (void)_this;
}
void Logical::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logical::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logical::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.Logical)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operands_.Clear();
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logical::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dsl.LogicOpType op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::dsl::LogicOpType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .dsl.Expr operands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Logical::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.Logical)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dsl.LogicOpType op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // repeated .dsl.Expr operands = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.Logical)
  return target;
}

size_t Logical::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.Logical)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dsl.Expr operands = 2;
  total_size += 1UL * this->_internal_operands_size();
  for (const auto& msg : this->operands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dsl.LogicOpType op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Logical::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Logical::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Logical::GetClassData() const { return &_class_data_; }

void Logical::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Logical *>(to)->MergeFrom(
      static_cast<const Logical &>(from));
}


void Logical::MergeFrom(const Logical& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.Logical)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  operands_.MergeFrom(from.operands_);
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Logical::CopyFrom(const Logical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.Logical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logical::IsInitialized() const {
  return true;
}

void Logical::InternalSwap(Logical* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operands_.InternalSwap(&other->operands_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logical::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[5]);
}

// ===================================================================

class NotExpr::_Internal {
 public:
  static const ::dsl::Expr& expr(const NotExpr* msg);
};

const ::dsl::Expr&
NotExpr::_Internal::expr(const NotExpr* msg) {
  return *msg->expr_;
}
NotExpr::NotExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dsl.NotExpr)
}
NotExpr::NotExpr(const NotExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expr()) {
    expr_ = new ::dsl::Expr(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dsl.NotExpr)
}

inline void NotExpr::SharedCtor() {
expr_ = nullptr;
}

NotExpr::~NotExpr() {
  // @@protoc_insertion_point(destructor:dsl.NotExpr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expr_;
}

void NotExpr::ArenaDtor(void* object) {
  NotExpr* _this = reinterpret_cast< NotExpr* >(object);
  (void)_this;
}
void NotExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:dsl.NotExpr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dsl.Expr expr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotExpr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsl.NotExpr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dsl.Expr expr = 1;
  if (this->_internal_has_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsl.NotExpr)
  return target;
}

size_t NotExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsl.NotExpr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dsl.Expr expr = 1;
  if (this->_internal_has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotExpr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotExpr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotExpr::GetClassData() const { return &_class_data_; }

void NotExpr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotExpr *>(to)->MergeFrom(
      static_cast<const NotExpr &>(from));
}


void NotExpr::MergeFrom(const NotExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsl.NotExpr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expr()) {
    _internal_mutable_expr()->::dsl::Expr::MergeFrom(from._internal_expr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotExpr::CopyFrom(const NotExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsl.NotExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotExpr::IsInitialized() const {
  return true;
}

void NotExpr::InternalSwap(NotExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(expr_, other->expr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rules_2eproto_getter, &descriptor_table_rules_2eproto_once,
      file_level_metadata_rules_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dsl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dsl::RuleSet* Arena::CreateMaybeMessage< ::dsl::RuleSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::RuleSet >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::Rule* Arena::CreateMaybeMessage< ::dsl::Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::Expr* Arena::CreateMaybeMessage< ::dsl::Expr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::Expr >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::Comparison* Arena::CreateMaybeMessage< ::dsl::Comparison >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::Comparison >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::RangeCheck* Arena::CreateMaybeMessage< ::dsl::RangeCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::RangeCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::Logical* Arena::CreateMaybeMessage< ::dsl::Logical >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::Logical >(arena);
}
template<> PROTOBUF_NOINLINE ::dsl::NotExpr* Arena::CreateMaybeMessage< ::dsl::NotExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsl::NotExpr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
