// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rules_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rules_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rules_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rules_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rules_2eproto;
namespace dsl {
class Comparison;
struct ComparisonDefaultTypeInternal;
extern ComparisonDefaultTypeInternal _Comparison_default_instance_;
class Expr;
struct ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class Logical;
struct LogicalDefaultTypeInternal;
extern LogicalDefaultTypeInternal _Logical_default_instance_;
class NotExpr;
struct NotExprDefaultTypeInternal;
extern NotExprDefaultTypeInternal _NotExpr_default_instance_;
class RangeCheck;
struct RangeCheckDefaultTypeInternal;
extern RangeCheckDefaultTypeInternal _RangeCheck_default_instance_;
class Rule;
struct RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class RuleSet;
struct RuleSetDefaultTypeInternal;
extern RuleSetDefaultTypeInternal _RuleSet_default_instance_;
}  // namespace dsl
PROTOBUF_NAMESPACE_OPEN
template<> ::dsl::Comparison* Arena::CreateMaybeMessage<::dsl::Comparison>(Arena*);
template<> ::dsl::Expr* Arena::CreateMaybeMessage<::dsl::Expr>(Arena*);
template<> ::dsl::Logical* Arena::CreateMaybeMessage<::dsl::Logical>(Arena*);
template<> ::dsl::NotExpr* Arena::CreateMaybeMessage<::dsl::NotExpr>(Arena*);
template<> ::dsl::RangeCheck* Arena::CreateMaybeMessage<::dsl::RangeCheck>(Arena*);
template<> ::dsl::Rule* Arena::CreateMaybeMessage<::dsl::Rule>(Arena*);
template<> ::dsl::RuleSet* Arena::CreateMaybeMessage<::dsl::RuleSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dsl {

enum SeverityType : int {
  WARN = 0,
  ERROR = 1,
  SeverityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SeverityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SeverityType_IsValid(int value);
constexpr SeverityType SeverityType_MIN = WARN;
constexpr SeverityType SeverityType_MAX = ERROR;
constexpr int SeverityType_ARRAYSIZE = SeverityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeverityType_descriptor();
template<typename T>
inline const std::string& SeverityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SeverityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SeverityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SeverityType_descriptor(), enum_t_value);
}
inline bool SeverityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SeverityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SeverityType>(
    SeverityType_descriptor(), name, value);
}
enum ComparisonOpType : int {
  UNSPECIFIED = 0,
  EQ = 1,
  NE = 2,
  GT = 3,
  GE = 4,
  LT = 5,
  LE = 6,
  ComparisonOpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ComparisonOpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ComparisonOpType_IsValid(int value);
constexpr ComparisonOpType ComparisonOpType_MIN = UNSPECIFIED;
constexpr ComparisonOpType ComparisonOpType_MAX = LE;
constexpr int ComparisonOpType_ARRAYSIZE = ComparisonOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOpType_descriptor();
template<typename T>
inline const std::string& ComparisonOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComparisonOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComparisonOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComparisonOpType_descriptor(), enum_t_value);
}
inline bool ComparisonOpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComparisonOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComparisonOpType>(
    ComparisonOpType_descriptor(), name, value);
}
enum LogicOpType : int {
  AND = 0,
  OR = 1,
  LogicOpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogicOpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogicOpType_IsValid(int value);
constexpr LogicOpType LogicOpType_MIN = AND;
constexpr LogicOpType LogicOpType_MAX = OR;
constexpr int LogicOpType_ARRAYSIZE = LogicOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicOpType_descriptor();
template<typename T>
inline const std::string& LogicOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicOpType_descriptor(), enum_t_value);
}
inline bool LogicOpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicOpType>(
    LogicOpType_descriptor(), name, value);
}
// ===================================================================

class RuleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.RuleSet) */ {
 public:
  inline RuleSet() : RuleSet(nullptr) {}
  ~RuleSet() override;
  explicit constexpr RuleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuleSet(const RuleSet& from);
  RuleSet(RuleSet&& from) noexcept
    : RuleSet() {
    *this = ::std::move(from);
  }

  inline RuleSet& operator=(const RuleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleSet& operator=(RuleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuleSet* internal_default_instance() {
    return reinterpret_cast<const RuleSet*>(
               &_RuleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuleSet& a, RuleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuleSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.RuleSet";
  }
  protected:
  explicit RuleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .dsl.Rule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::dsl::Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Rule >*
      mutable_rules();
  private:
  const ::dsl::Rule& _internal_rules(int index) const;
  ::dsl::Rule* _internal_add_rules();
  public:
  const ::dsl::Rule& rules(int index) const;
  ::dsl::Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Rule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:dsl.RuleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Rule > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Rule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {}
  ~Rule() override;
  explicit constexpr Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kConditionFieldNumber = 3,
    kSeverityFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .dsl.Expr condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::dsl::Expr& condition() const;
  PROTOBUF_NODISCARD ::dsl::Expr* release_condition();
  ::dsl::Expr* mutable_condition();
  void set_allocated_condition(::dsl::Expr* condition);
  private:
  const ::dsl::Expr& _internal_condition() const;
  ::dsl::Expr* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::dsl::Expr* condition);
  ::dsl::Expr* unsafe_arena_release_condition();

  // .dsl.SeverityType severity = 1;
  void clear_severity();
  ::dsl::SeverityType severity() const;
  void set_severity(::dsl::SeverityType value);
  private:
  ::dsl::SeverityType _internal_severity() const;
  void _internal_set_severity(::dsl::SeverityType value);
  public:

  // @@protoc_insertion_point(class_scope:dsl.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::dsl::Expr* condition_;
  int severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Expr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {}
  ~Expr() override;
  explicit constexpr Expr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr& default_instance() {
    return *internal_default_instance();
  }
  enum ExprKindCase {
    kComparison = 1,
    kRange = 2,
    kLogical = 3,
    kNotExpr = 4,
    EXPR_KIND_NOT_SET = 0,
  };

  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.Expr";
  }
  protected:
  explicit Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparisonFieldNumber = 1,
    kRangeFieldNumber = 2,
    kLogicalFieldNumber = 3,
    kNotExprFieldNumber = 4,
  };
  // .dsl.Comparison comparison = 1;
  bool has_comparison() const;
  private:
  bool _internal_has_comparison() const;
  public:
  void clear_comparison();
  const ::dsl::Comparison& comparison() const;
  PROTOBUF_NODISCARD ::dsl::Comparison* release_comparison();
  ::dsl::Comparison* mutable_comparison();
  void set_allocated_comparison(::dsl::Comparison* comparison);
  private:
  const ::dsl::Comparison& _internal_comparison() const;
  ::dsl::Comparison* _internal_mutable_comparison();
  public:
  void unsafe_arena_set_allocated_comparison(
      ::dsl::Comparison* comparison);
  ::dsl::Comparison* unsafe_arena_release_comparison();

  // .dsl.RangeCheck range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::dsl::RangeCheck& range() const;
  PROTOBUF_NODISCARD ::dsl::RangeCheck* release_range();
  ::dsl::RangeCheck* mutable_range();
  void set_allocated_range(::dsl::RangeCheck* range);
  private:
  const ::dsl::RangeCheck& _internal_range() const;
  ::dsl::RangeCheck* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::dsl::RangeCheck* range);
  ::dsl::RangeCheck* unsafe_arena_release_range();

  // .dsl.Logical logical = 3;
  bool has_logical() const;
  private:
  bool _internal_has_logical() const;
  public:
  void clear_logical();
  const ::dsl::Logical& logical() const;
  PROTOBUF_NODISCARD ::dsl::Logical* release_logical();
  ::dsl::Logical* mutable_logical();
  void set_allocated_logical(::dsl::Logical* logical);
  private:
  const ::dsl::Logical& _internal_logical() const;
  ::dsl::Logical* _internal_mutable_logical();
  public:
  void unsafe_arena_set_allocated_logical(
      ::dsl::Logical* logical);
  ::dsl::Logical* unsafe_arena_release_logical();

  // .dsl.NotExpr not_expr = 4;
  bool has_not_expr() const;
  private:
  bool _internal_has_not_expr() const;
  public:
  void clear_not_expr();
  const ::dsl::NotExpr& not_expr() const;
  PROTOBUF_NODISCARD ::dsl::NotExpr* release_not_expr();
  ::dsl::NotExpr* mutable_not_expr();
  void set_allocated_not_expr(::dsl::NotExpr* not_expr);
  private:
  const ::dsl::NotExpr& _internal_not_expr() const;
  ::dsl::NotExpr* _internal_mutable_not_expr();
  public:
  void unsafe_arena_set_allocated_not_expr(
      ::dsl::NotExpr* not_expr);
  ::dsl::NotExpr* unsafe_arena_release_not_expr();

  void clear_expr_kind();
  ExprKindCase expr_kind_case() const;
  // @@protoc_insertion_point(class_scope:dsl.Expr)
 private:
  class _Internal;
  void set_has_comparison();
  void set_has_range();
  void set_has_logical();
  void set_has_not_expr();

  inline bool has_expr_kind() const;
  inline void clear_has_expr_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ExprKindUnion {
    constexpr ExprKindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::dsl::Comparison* comparison_;
    ::dsl::RangeCheck* range_;
    ::dsl::Logical* logical_;
    ::dsl::NotExpr* not_expr_;
  } expr_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Comparison final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.Comparison) */ {
 public:
  inline Comparison() : Comparison(nullptr) {}
  ~Comparison() override;
  explicit constexpr Comparison(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Comparison(const Comparison& from);
  Comparison(Comparison&& from) noexcept
    : Comparison() {
    *this = ::std::move(from);
  }

  inline Comparison& operator=(const Comparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline Comparison& operator=(Comparison&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Comparison& default_instance() {
    return *internal_default_instance();
  }
  static inline const Comparison* internal_default_instance() {
    return reinterpret_cast<const Comparison*>(
               &_Comparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Comparison& a, Comparison& b) {
    a.Swap(&b);
  }
  inline void Swap(Comparison* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Comparison* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Comparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Comparison>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Comparison& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Comparison& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Comparison* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.Comparison";
  }
  protected:
  explicit Comparison(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kValueFieldNumber = 3,
    kOpFieldNumber = 2,
  };
  // string column = 1;
  void clear_column();
  const std::string& column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column();
  PROTOBUF_NODISCARD std::string* release_column();
  void set_allocated_column(std::string* column);
  private:
  const std::string& _internal_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column(const std::string& value);
  std::string* _internal_mutable_column();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .dsl.ComparisonOpType op = 2;
  void clear_op();
  ::dsl::ComparisonOpType op() const;
  void set_op(::dsl::ComparisonOpType value);
  private:
  ::dsl::ComparisonOpType _internal_op() const;
  void _internal_set_op(::dsl::ComparisonOpType value);
  public:

  // @@protoc_insertion_point(class_scope:dsl.Comparison)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class RangeCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.RangeCheck) */ {
 public:
  inline RangeCheck() : RangeCheck(nullptr) {}
  ~RangeCheck() override;
  explicit constexpr RangeCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeCheck(const RangeCheck& from);
  RangeCheck(RangeCheck&& from) noexcept
    : RangeCheck() {
    *this = ::std::move(from);
  }

  inline RangeCheck& operator=(const RangeCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeCheck& operator=(RangeCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeCheck* internal_default_instance() {
    return reinterpret_cast<const RangeCheck*>(
               &_RangeCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RangeCheck& a, RangeCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeCheck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeCheck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeCheck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RangeCheck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeCheck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.RangeCheck";
  }
  protected:
  explicit RangeCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kLowFieldNumber = 2,
    kHighFieldNumber = 3,
  };
  // string column = 1;
  void clear_column();
  const std::string& column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column();
  PROTOBUF_NODISCARD std::string* release_column();
  void set_allocated_column(std::string* column);
  private:
  const std::string& _internal_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column(const std::string& value);
  std::string* _internal_mutable_column();
  public:

  // double low = 2;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double high = 3;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // @@protoc_insertion_point(class_scope:dsl.RangeCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_;
  double low_;
  double high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Logical final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.Logical) */ {
 public:
  inline Logical() : Logical(nullptr) {}
  ~Logical() override;
  explicit constexpr Logical(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logical(const Logical& from);
  Logical(Logical&& from) noexcept
    : Logical() {
    *this = ::std::move(from);
  }

  inline Logical& operator=(const Logical& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logical& operator=(Logical&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Logical& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logical* internal_default_instance() {
    return reinterpret_cast<const Logical*>(
               &_Logical_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Logical& a, Logical& b) {
    a.Swap(&b);
  }
  inline void Swap(Logical* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logical* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Logical* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Logical>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Logical& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Logical& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logical* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.Logical";
  }
  protected:
  explicit Logical(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandsFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // repeated .dsl.Expr operands = 2;
  int operands_size() const;
  private:
  int _internal_operands_size() const;
  public:
  void clear_operands();
  ::dsl::Expr* mutable_operands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Expr >*
      mutable_operands();
  private:
  const ::dsl::Expr& _internal_operands(int index) const;
  ::dsl::Expr* _internal_add_operands();
  public:
  const ::dsl::Expr& operands(int index) const;
  ::dsl::Expr* add_operands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Expr >&
      operands() const;

  // .dsl.LogicOpType op = 1;
  void clear_op();
  ::dsl::LogicOpType op() const;
  void set_op(::dsl::LogicOpType value);
  private:
  ::dsl::LogicOpType _internal_op() const;
  void _internal_set_op(::dsl::LogicOpType value);
  public:

  // @@protoc_insertion_point(class_scope:dsl.Logical)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Expr > operands_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class NotExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dsl.NotExpr) */ {
 public:
  inline NotExpr() : NotExpr(nullptr) {}
  ~NotExpr() override;
  explicit constexpr NotExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotExpr(const NotExpr& from);
  NotExpr(NotExpr&& from) noexcept
    : NotExpr() {
    *this = ::std::move(from);
  }

  inline NotExpr& operator=(const NotExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotExpr& operator=(NotExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotExpr* internal_default_instance() {
    return reinterpret_cast<const NotExpr*>(
               &_NotExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NotExpr& a, NotExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(NotExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotExpr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dsl.NotExpr";
  }
  protected:
  explicit NotExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprFieldNumber = 1,
  };
  // .dsl.Expr expr = 1;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const ::dsl::Expr& expr() const;
  PROTOBUF_NODISCARD ::dsl::Expr* release_expr();
  ::dsl::Expr* mutable_expr();
  void set_allocated_expr(::dsl::Expr* expr);
  private:
  const ::dsl::Expr& _internal_expr() const;
  ::dsl::Expr* _internal_mutable_expr();
  public:
  void unsafe_arena_set_allocated_expr(
      ::dsl::Expr* expr);
  ::dsl::Expr* unsafe_arena_release_expr();

  // @@protoc_insertion_point(class_scope:dsl.NotExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dsl::Expr* expr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rules_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuleSet

// repeated .dsl.Rule rules = 1;
inline int RuleSet::_internal_rules_size() const {
  return rules_.size();
}
inline int RuleSet::rules_size() const {
  return _internal_rules_size();
}
inline void RuleSet::clear_rules() {
  rules_.Clear();
}
inline ::dsl::Rule* RuleSet::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:dsl.RuleSet.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Rule >*
RuleSet::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:dsl.RuleSet.rules)
  return &rules_;
}
inline const ::dsl::Rule& RuleSet::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::dsl::Rule& RuleSet::rules(int index) const {
  // @@protoc_insertion_point(field_get:dsl.RuleSet.rules)
  return _internal_rules(index);
}
inline ::dsl::Rule* RuleSet::_internal_add_rules() {
  return rules_.Add();
}
inline ::dsl::Rule* RuleSet::add_rules() {
  ::dsl::Rule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:dsl.RuleSet.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Rule >&
RuleSet::rules() const {
  // @@protoc_insertion_point(field_list:dsl.RuleSet.rules)
  return rules_;
}

// -------------------------------------------------------------------

// Rule

// .dsl.SeverityType severity = 1;
inline void Rule::clear_severity() {
  severity_ = 0;
}
inline ::dsl::SeverityType Rule::_internal_severity() const {
  return static_cast< ::dsl::SeverityType >(severity_);
}
inline ::dsl::SeverityType Rule::severity() const {
  // @@protoc_insertion_point(field_get:dsl.Rule.severity)
  return _internal_severity();
}
inline void Rule::_internal_set_severity(::dsl::SeverityType value) {
  
  severity_ = value;
}
inline void Rule::set_severity(::dsl::SeverityType value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:dsl.Rule.severity)
}

// string label = 2;
inline void Rule::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Rule::label() const {
  // @@protoc_insertion_point(field_get:dsl.Rule.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Rule::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsl.Rule.label)
}
inline std::string* Rule::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:dsl.Rule.label)
  return _s;
}
inline const std::string& Rule::_internal_label() const {
  return label_.Get();
}
inline void Rule::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Rule::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Rule::release_label() {
  // @@protoc_insertion_point(field_release:dsl.Rule.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Rule::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsl.Rule.label)
}

// .dsl.Expr condition = 3;
inline bool Rule::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool Rule::has_condition() const {
  return _internal_has_condition();
}
inline void Rule::clear_condition() {
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::dsl::Expr& Rule::_internal_condition() const {
  const ::dsl::Expr* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::dsl::Expr&>(
      ::dsl::_Expr_default_instance_);
}
inline const ::dsl::Expr& Rule::condition() const {
  // @@protoc_insertion_point(field_get:dsl.Rule.condition)
  return _internal_condition();
}
inline void Rule::unsafe_arena_set_allocated_condition(
    ::dsl::Expr* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.Rule.condition)
}
inline ::dsl::Expr* Rule::release_condition() {
  
  ::dsl::Expr* temp = condition_;
  condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dsl::Expr* Rule::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:dsl.Rule.condition)
  
  ::dsl::Expr* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::dsl::Expr* Rule::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::dsl::Expr>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::dsl::Expr* Rule::mutable_condition() {
  ::dsl::Expr* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:dsl.Rule.condition)
  return _msg;
}
inline void Rule::set_allocated_condition(::dsl::Expr* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::Expr>::GetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:dsl.Rule.condition)
}

// -------------------------------------------------------------------

// Expr

// .dsl.Comparison comparison = 1;
inline bool Expr::_internal_has_comparison() const {
  return expr_kind_case() == kComparison;
}
inline bool Expr::has_comparison() const {
  return _internal_has_comparison();
}
inline void Expr::set_has_comparison() {
  _oneof_case_[0] = kComparison;
}
inline void Expr::clear_comparison() {
  if (_internal_has_comparison()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.comparison_;
    }
    clear_has_expr_kind();
  }
}
inline ::dsl::Comparison* Expr::release_comparison() {
  // @@protoc_insertion_point(field_release:dsl.Expr.comparison)
  if (_internal_has_comparison()) {
    clear_has_expr_kind();
      ::dsl::Comparison* temp = expr_kind_.comparison_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dsl::Comparison& Expr::_internal_comparison() const {
  return _internal_has_comparison()
      ? *expr_kind_.comparison_
      : reinterpret_cast< ::dsl::Comparison&>(::dsl::_Comparison_default_instance_);
}
inline const ::dsl::Comparison& Expr::comparison() const {
  // @@protoc_insertion_point(field_get:dsl.Expr.comparison)
  return _internal_comparison();
}
inline ::dsl::Comparison* Expr::unsafe_arena_release_comparison() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dsl.Expr.comparison)
  if (_internal_has_comparison()) {
    clear_has_expr_kind();
    ::dsl::Comparison* temp = expr_kind_.comparison_;
    expr_kind_.comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_comparison(::dsl::Comparison* comparison) {
  clear_expr_kind();
  if (comparison) {
    set_has_comparison();
    expr_kind_.comparison_ = comparison;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.Expr.comparison)
}
inline ::dsl::Comparison* Expr::_internal_mutable_comparison() {
  if (!_internal_has_comparison()) {
    clear_expr_kind();
    set_has_comparison();
    expr_kind_.comparison_ = CreateMaybeMessage< ::dsl::Comparison >(GetArenaForAllocation());
  }
  return expr_kind_.comparison_;
}
inline ::dsl::Comparison* Expr::mutable_comparison() {
  ::dsl::Comparison* _msg = _internal_mutable_comparison();
  // @@protoc_insertion_point(field_mutable:dsl.Expr.comparison)
  return _msg;
}

// .dsl.RangeCheck range = 2;
inline bool Expr::_internal_has_range() const {
  return expr_kind_case() == kRange;
}
inline bool Expr::has_range() const {
  return _internal_has_range();
}
inline void Expr::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void Expr::clear_range() {
  if (_internal_has_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.range_;
    }
    clear_has_expr_kind();
  }
}
inline ::dsl::RangeCheck* Expr::release_range() {
  // @@protoc_insertion_point(field_release:dsl.Expr.range)
  if (_internal_has_range()) {
    clear_has_expr_kind();
      ::dsl::RangeCheck* temp = expr_kind_.range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dsl::RangeCheck& Expr::_internal_range() const {
  return _internal_has_range()
      ? *expr_kind_.range_
      : reinterpret_cast< ::dsl::RangeCheck&>(::dsl::_RangeCheck_default_instance_);
}
inline const ::dsl::RangeCheck& Expr::range() const {
  // @@protoc_insertion_point(field_get:dsl.Expr.range)
  return _internal_range();
}
inline ::dsl::RangeCheck* Expr::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dsl.Expr.range)
  if (_internal_has_range()) {
    clear_has_expr_kind();
    ::dsl::RangeCheck* temp = expr_kind_.range_;
    expr_kind_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_range(::dsl::RangeCheck* range) {
  clear_expr_kind();
  if (range) {
    set_has_range();
    expr_kind_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.Expr.range)
}
inline ::dsl::RangeCheck* Expr::_internal_mutable_range() {
  if (!_internal_has_range()) {
    clear_expr_kind();
    set_has_range();
    expr_kind_.range_ = CreateMaybeMessage< ::dsl::RangeCheck >(GetArenaForAllocation());
  }
  return expr_kind_.range_;
}
inline ::dsl::RangeCheck* Expr::mutable_range() {
  ::dsl::RangeCheck* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:dsl.Expr.range)
  return _msg;
}

// .dsl.Logical logical = 3;
inline bool Expr::_internal_has_logical() const {
  return expr_kind_case() == kLogical;
}
inline bool Expr::has_logical() const {
  return _internal_has_logical();
}
inline void Expr::set_has_logical() {
  _oneof_case_[0] = kLogical;
}
inline void Expr::clear_logical() {
  if (_internal_has_logical()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.logical_;
    }
    clear_has_expr_kind();
  }
}
inline ::dsl::Logical* Expr::release_logical() {
  // @@protoc_insertion_point(field_release:dsl.Expr.logical)
  if (_internal_has_logical()) {
    clear_has_expr_kind();
      ::dsl::Logical* temp = expr_kind_.logical_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.logical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dsl::Logical& Expr::_internal_logical() const {
  return _internal_has_logical()
      ? *expr_kind_.logical_
      : reinterpret_cast< ::dsl::Logical&>(::dsl::_Logical_default_instance_);
}
inline const ::dsl::Logical& Expr::logical() const {
  // @@protoc_insertion_point(field_get:dsl.Expr.logical)
  return _internal_logical();
}
inline ::dsl::Logical* Expr::unsafe_arena_release_logical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dsl.Expr.logical)
  if (_internal_has_logical()) {
    clear_has_expr_kind();
    ::dsl::Logical* temp = expr_kind_.logical_;
    expr_kind_.logical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_logical(::dsl::Logical* logical) {
  clear_expr_kind();
  if (logical) {
    set_has_logical();
    expr_kind_.logical_ = logical;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.Expr.logical)
}
inline ::dsl::Logical* Expr::_internal_mutable_logical() {
  if (!_internal_has_logical()) {
    clear_expr_kind();
    set_has_logical();
    expr_kind_.logical_ = CreateMaybeMessage< ::dsl::Logical >(GetArenaForAllocation());
  }
  return expr_kind_.logical_;
}
inline ::dsl::Logical* Expr::mutable_logical() {
  ::dsl::Logical* _msg = _internal_mutable_logical();
  // @@protoc_insertion_point(field_mutable:dsl.Expr.logical)
  return _msg;
}

// .dsl.NotExpr not_expr = 4;
inline bool Expr::_internal_has_not_expr() const {
  return expr_kind_case() == kNotExpr;
}
inline bool Expr::has_not_expr() const {
  return _internal_has_not_expr();
}
inline void Expr::set_has_not_expr() {
  _oneof_case_[0] = kNotExpr;
}
inline void Expr::clear_not_expr() {
  if (_internal_has_not_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.not_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::dsl::NotExpr* Expr::release_not_expr() {
  // @@protoc_insertion_point(field_release:dsl.Expr.not_expr)
  if (_internal_has_not_expr()) {
    clear_has_expr_kind();
      ::dsl::NotExpr* temp = expr_kind_.not_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.not_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dsl::NotExpr& Expr::_internal_not_expr() const {
  return _internal_has_not_expr()
      ? *expr_kind_.not_expr_
      : reinterpret_cast< ::dsl::NotExpr&>(::dsl::_NotExpr_default_instance_);
}
inline const ::dsl::NotExpr& Expr::not_expr() const {
  // @@protoc_insertion_point(field_get:dsl.Expr.not_expr)
  return _internal_not_expr();
}
inline ::dsl::NotExpr* Expr::unsafe_arena_release_not_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dsl.Expr.not_expr)
  if (_internal_has_not_expr()) {
    clear_has_expr_kind();
    ::dsl::NotExpr* temp = expr_kind_.not_expr_;
    expr_kind_.not_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_not_expr(::dsl::NotExpr* not_expr) {
  clear_expr_kind();
  if (not_expr) {
    set_has_not_expr();
    expr_kind_.not_expr_ = not_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.Expr.not_expr)
}
inline ::dsl::NotExpr* Expr::_internal_mutable_not_expr() {
  if (!_internal_has_not_expr()) {
    clear_expr_kind();
    set_has_not_expr();
    expr_kind_.not_expr_ = CreateMaybeMessage< ::dsl::NotExpr >(GetArenaForAllocation());
  }
  return expr_kind_.not_expr_;
}
inline ::dsl::NotExpr* Expr::mutable_not_expr() {
  ::dsl::NotExpr* _msg = _internal_mutable_not_expr();
  // @@protoc_insertion_point(field_mutable:dsl.Expr.not_expr)
  return _msg;
}

inline bool Expr::has_expr_kind() const {
  return expr_kind_case() != EXPR_KIND_NOT_SET;
}
inline void Expr::clear_has_expr_kind() {
  _oneof_case_[0] = EXPR_KIND_NOT_SET;
}
inline Expr::ExprKindCase Expr::expr_kind_case() const {
  return Expr::ExprKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Comparison

// string column = 1;
inline void Comparison::clear_column() {
  column_.ClearToEmpty();
}
inline const std::string& Comparison::column() const {
  // @@protoc_insertion_point(field_get:dsl.Comparison.column)
  return _internal_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Comparison::set_column(ArgT0&& arg0, ArgT... args) {
 
 column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsl.Comparison.column)
}
inline std::string* Comparison::mutable_column() {
  std::string* _s = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:dsl.Comparison.column)
  return _s;
}
inline const std::string& Comparison::_internal_column() const {
  return column_.Get();
}
inline void Comparison::_internal_set_column(const std::string& value) {
  
  column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Comparison::_internal_mutable_column() {
  
  return column_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Comparison::release_column() {
  // @@protoc_insertion_point(field_release:dsl.Comparison.column)
  return column_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Comparison::set_allocated_column(std::string* column) {
  if (column != nullptr) {
    
  } else {
    
  }
  column_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (column_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsl.Comparison.column)
}

// .dsl.ComparisonOpType op = 2;
inline void Comparison::clear_op() {
  op_ = 0;
}
inline ::dsl::ComparisonOpType Comparison::_internal_op() const {
  return static_cast< ::dsl::ComparisonOpType >(op_);
}
inline ::dsl::ComparisonOpType Comparison::op() const {
  // @@protoc_insertion_point(field_get:dsl.Comparison.op)
  return _internal_op();
}
inline void Comparison::_internal_set_op(::dsl::ComparisonOpType value) {
  
  op_ = value;
}
inline void Comparison::set_op(::dsl::ComparisonOpType value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:dsl.Comparison.op)
}

// string value = 3;
inline void Comparison::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Comparison::value() const {
  // @@protoc_insertion_point(field_get:dsl.Comparison.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Comparison::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsl.Comparison.value)
}
inline std::string* Comparison::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dsl.Comparison.value)
  return _s;
}
inline const std::string& Comparison::_internal_value() const {
  return value_.Get();
}
inline void Comparison::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Comparison::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Comparison::release_value() {
  // @@protoc_insertion_point(field_release:dsl.Comparison.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Comparison::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsl.Comparison.value)
}

// -------------------------------------------------------------------

// RangeCheck

// string column = 1;
inline void RangeCheck::clear_column() {
  column_.ClearToEmpty();
}
inline const std::string& RangeCheck::column() const {
  // @@protoc_insertion_point(field_get:dsl.RangeCheck.column)
  return _internal_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RangeCheck::set_column(ArgT0&& arg0, ArgT... args) {
 
 column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dsl.RangeCheck.column)
}
inline std::string* RangeCheck::mutable_column() {
  std::string* _s = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:dsl.RangeCheck.column)
  return _s;
}
inline const std::string& RangeCheck::_internal_column() const {
  return column_.Get();
}
inline void RangeCheck::_internal_set_column(const std::string& value) {
  
  column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RangeCheck::_internal_mutable_column() {
  
  return column_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RangeCheck::release_column() {
  // @@protoc_insertion_point(field_release:dsl.RangeCheck.column)
  return column_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RangeCheck::set_allocated_column(std::string* column) {
  if (column != nullptr) {
    
  } else {
    
  }
  column_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (column_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dsl.RangeCheck.column)
}

// double low = 2;
inline void RangeCheck::clear_low() {
  low_ = 0;
}
inline double RangeCheck::_internal_low() const {
  return low_;
}
inline double RangeCheck::low() const {
  // @@protoc_insertion_point(field_get:dsl.RangeCheck.low)
  return _internal_low();
}
inline void RangeCheck::_internal_set_low(double value) {
  
  low_ = value;
}
inline void RangeCheck::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:dsl.RangeCheck.low)
}

// double high = 3;
inline void RangeCheck::clear_high() {
  high_ = 0;
}
inline double RangeCheck::_internal_high() const {
  return high_;
}
inline double RangeCheck::high() const {
  // @@protoc_insertion_point(field_get:dsl.RangeCheck.high)
  return _internal_high();
}
inline void RangeCheck::_internal_set_high(double value) {
  
  high_ = value;
}
inline void RangeCheck::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:dsl.RangeCheck.high)
}

// -------------------------------------------------------------------

// Logical

// .dsl.LogicOpType op = 1;
inline void Logical::clear_op() {
  op_ = 0;
}
inline ::dsl::LogicOpType Logical::_internal_op() const {
  return static_cast< ::dsl::LogicOpType >(op_);
}
inline ::dsl::LogicOpType Logical::op() const {
  // @@protoc_insertion_point(field_get:dsl.Logical.op)
  return _internal_op();
}
inline void Logical::_internal_set_op(::dsl::LogicOpType value) {
  
  op_ = value;
}
inline void Logical::set_op(::dsl::LogicOpType value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:dsl.Logical.op)
}

// repeated .dsl.Expr operands = 2;
inline int Logical::_internal_operands_size() const {
  return operands_.size();
}
inline int Logical::operands_size() const {
  return _internal_operands_size();
}
inline void Logical::clear_operands() {
  operands_.Clear();
}
inline ::dsl::Expr* Logical::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:dsl.Logical.operands)
  return operands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Expr >*
Logical::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:dsl.Logical.operands)
  return &operands_;
}
inline const ::dsl::Expr& Logical::_internal_operands(int index) const {
  return operands_.Get(index);
}
inline const ::dsl::Expr& Logical::operands(int index) const {
  // @@protoc_insertion_point(field_get:dsl.Logical.operands)
  return _internal_operands(index);
}
inline ::dsl::Expr* Logical::_internal_add_operands() {
  return operands_.Add();
}
inline ::dsl::Expr* Logical::add_operands() {
  ::dsl::Expr* _add = _internal_add_operands();
  // @@protoc_insertion_point(field_add:dsl.Logical.operands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dsl::Expr >&
Logical::operands() const {
  // @@protoc_insertion_point(field_list:dsl.Logical.operands)
  return operands_;
}

// -------------------------------------------------------------------

// NotExpr

// .dsl.Expr expr = 1;
inline bool NotExpr::_internal_has_expr() const {
  return this != internal_default_instance() && expr_ != nullptr;
}
inline bool NotExpr::has_expr() const {
  return _internal_has_expr();
}
inline void NotExpr::clear_expr() {
  if (GetArenaForAllocation() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
}
inline const ::dsl::Expr& NotExpr::_internal_expr() const {
  const ::dsl::Expr* p = expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::dsl::Expr&>(
      ::dsl::_Expr_default_instance_);
}
inline const ::dsl::Expr& NotExpr::expr() const {
  // @@protoc_insertion_point(field_get:dsl.NotExpr.expr)
  return _internal_expr();
}
inline void NotExpr::unsafe_arena_set_allocated_expr(
    ::dsl::Expr* expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expr_);
  }
  expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dsl.NotExpr.expr)
}
inline ::dsl::Expr* NotExpr::release_expr() {
  
  ::dsl::Expr* temp = expr_;
  expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dsl::Expr* NotExpr::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_release:dsl.NotExpr.expr)
  
  ::dsl::Expr* temp = expr_;
  expr_ = nullptr;
  return temp;
}
inline ::dsl::Expr* NotExpr::_internal_mutable_expr() {
  
  if (expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::dsl::Expr>(GetArenaForAllocation());
    expr_ = p;
  }
  return expr_;
}
inline ::dsl::Expr* NotExpr::mutable_expr() {
  ::dsl::Expr* _msg = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:dsl.NotExpr.expr)
  return _msg;
}
inline void NotExpr::set_allocated_expr(::dsl::Expr* expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete expr_;
  }
  if (expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dsl::Expr>::GetOwningArena(expr);
    if (message_arena != submessage_arena) {
      expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    
  } else {
    
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:dsl.NotExpr.expr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dsl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dsl::SeverityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dsl::SeverityType>() {
  return ::dsl::SeverityType_descriptor();
}
template <> struct is_proto_enum< ::dsl::ComparisonOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dsl::ComparisonOpType>() {
  return ::dsl::ComparisonOpType_descriptor();
}
template <> struct is_proto_enum< ::dsl::LogicOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dsl::LogicOpType>() {
  return ::dsl::LogicOpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rules_2eproto
